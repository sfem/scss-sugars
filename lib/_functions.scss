@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@function to-string($value) {
  @if type-of($value) == string {
    @return unquote($value);
  }
  @else {
    @return inspect($value + unquote(""));
  }
}

@function get-text-color($c, $l: $sugar-text-light, $d: $sugar-text-dark) {
  $x: round((red($c)*299 + green($c)*587 + blue($c)*114) / 1000);
  @if ($x > 160) {
    @return $d;
  } @else {
    @return $l;
  }
}

@function typo(
  $s: $sugar-typo-fz,
  $lh: $sugar-typo-lh,
  $w: $sugar-typo-fw,
  $f: $sugar-typo-font
) {
  @return unquote($w + ' ' + $s + '/' + $lh + ' ' + $f);
}

@function deep-map-merge($parent-map, $child-map) {
  $result: $parent-map;
  @each $key, $value in $child-map {
    @if (not map-has-key($result, $key)) or (type-of(map-get($result, $key)) != type-of($value)) or (not (type-of(map-get($result, $key)) == map and type-of($value) == map)) {
      $result: map-merge($result, ($key: $value));
    } @else {
      $result: map-merge($result, ($key: deep-map-merge(map-get($result, $key), $value)));
    }
  }

  @return $result;
}
